c from "picocolors"
{ program } from "commander"
fs from "fs-extra"
glob from "fast-glob"
{ join } from "node:path"
path from "node:path"
chokidar from "chokidar"
ora from "ora"
{ compile } from "@danielx/civet"

function debounce<T>(func: T, timeout = 1000): T
    timer .= null as any
    (
        (...args: any) => 
            clearTimeout timer
            timer = setTimeout => (func as any)(...args), timeout
    ) as any

cwd := process.cwd()
vscodeConfigDir := join cwd, ".vscode"
vscodeConfigFile := join vscodeConfigDir, "settings.json"

collectFiles := async => 
    new Set await glob "**/*.civet", ignore: ["node_modules/**/*", "dist/**/*"], cwd: cwd
    

step := async (desc: string, fn: any) => 
    const spinner = ora desc
    spinner.start()
    await Promise.resolve fn()
    spinner.stop()

compileFile := async (file: string) =>
    a := 5 |> & + 7
    content := await fs.readFile file, "utf8"
    compiled := await compile content, (inlineMap: true) as any
    """
    // Source: #{file}
    // Generated by Civetman

    #{compiled}
    """

fileToOutFile := (file: string, tsx: boolean) => file.replace ".civet", tsx ? ".tsx" : ".ts"

buildFile := async (file: string, tsx: boolean) =>
    outFile := fileToOutFile file, tsx
    compiled := await compileFile file
    await fs.writeFile outFile, compiled, "utf8"
    outFile

civetmanVscodeConfigBanner := "below is generated by civetman"
vscodeConfigFileExludeKey := "files.exclude"
addVscodeConfigFileExclude := debounce(async (files: string[]) => 
    spinner := ora c.blue """Adding exclude files to VSCode config"""
    spinner.start()

    await fs.ensureDir vscodeConfigDir
    await fs.ensureFile vscodeConfigFile
    vscconfig := JSON.parse (await fs.readFile vscodeConfigFile).toString().trim() || "{}"
    if !vscconfig[vscodeConfigFileExludeKey] then vscconfig[vscodeConfigFileExludeKey] = {}

    found .= false
    vscconfig[vscodeConfigFileExludeKey] = [
        ...Object.keys(vscconfig[vscodeConfigFileExludeKey]).reduce(((prev: string[], curr: string) => 
            if curr === civetmanVscodeConfigBanner then found = true
            found ? prev : [...prev, curr]
           ), []), 
        civetmanVscodeConfigBanner, 
        ...files,
    ].reduce (prev, file) => ({ ...prev, [file]: true }), {}

    await fs.writeFile vscodeConfigFile, (JSON.stringify vscconfig, null, "\t"), "utf8"

    spinner.stop()
    spinner.succeed()
)

gitignoreFile := join cwd, ".gitignore"
gitignoreStart := """
    # Generated by Civetman
    # DO NOT ADD CONTENT BELOW THIS (They will be removed by Civetman)
"""
addGitignore := debounce(
    async (files: string[]) => 
        spinner := ora c.blue """Adding files to .gitignore"""
        spinner.start()

        await fs.ensureFile gitignoreFile
        gitignore := await fs.readFile gitignoreFile, "utf8"
        start := gitignore.indexOf gitignoreStart
        before := start === -1 ? gitignore : gitignore.slice 0, start
        content := """
            #{before.trimEnd()}

            #{gitignoreStart}
            #{files.join("\n")}
        """
        await fs.writeFile gitignoreFile, content, "utf8"

        spinner.stop()
        spinner.succeed()
)
    
program
    .name "civetman" 
    .description "Use Civet in any projects!" 
    .version "0.0.1"
    .option "-x, --tsx, --jsx", "Generate `.tsx` files instead of `.ts` files"

type Options = { tsx: boolean }
opts .= null as unknown as Options
defaultOpts := { tsx: false }

program
    .command "build"
    .description "Start building Civet files" 
    .action async => 
        console.log c.blue """Civetman starts building...\n"""

        spinner := ora c.blue """Building Civet files\n"""
        files := await collectFiles()
        outFiles := [] as string[]
        for file of files
            outFile := await buildFile file, opts.tsx
            outFiles.push outFile
            spinner.succeed """
                #{c.cyan file} -> #{c.green outFile}
            """
        spinner.stop()
        spinner.succeed("All Civet files built!\n")
        
        await addVscodeConfigFileExclude outFiles
        await addGitignore outFiles

        console.log c.green """\nCivetman finished building!"""

        return

program
    .command "dev"
    .description "Start building Civet files in watch mode"
    .action async => 
        console.log c.blue """Civetman starts building in watch mode...\n"""
        spinner := ora c.blue """Building Civet files\n"""

        files := await collectFiles()
        outFiles := new Set<string>()

        buildOneFile := async (file: string) => 
            outFile := await buildFile file, opts.tsx
            outFiles.add outFile
            spinner.succeed """
                #{c.cyan file} -> #{c.green outFile}
            """

        watcher := chokidar.watch [...files, cwd], ignored: [/node_modules/gi, /dist/gi]
        watcher.on "add", async (fileAbsolute) => 
            file := path.relative cwd, fileAbsolute
            if file.endsWith(".civet") 
                await buildOneFile file
                files.add file
                watcher.add file
        
                await addVscodeConfigFileExclude [...outFiles]
                await addGitignore [...outFiles]
        
        watcher.on "change", async (fileAbsolute) => 
            file := path.relative cwd, fileAbsolute
            if files.has file
                await buildOneFile file
        
        watcher.on 'unlink', async (fileAbsolute) => 
            file := path.relative cwd, fileAbsolute
            if files.has file
                files.delete file
                outFile := fileToOutFile file, opts.tsx
                outFiles.delete outFile
                fs.unlink join cwd, outFile
        
                await addVscodeConfigFileExclude [...outFiles]
                await addGitignore [...outFiles]

        process.on 'beforexit', => watcher.close()

        return

export default () => 
    program.hook 'preAction' , => opts = { ...defaultOpts, ...program.opts<Options>() };
    program.parse(process.argv)