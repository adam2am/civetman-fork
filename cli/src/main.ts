// Source: /Users/zionchen/Main/h/civetman/examples/base/node_modules/civetman/src/main.civet
// Generated by Civetman

import c from "picocolors";
import { program } from "commander"
import fs from "fs-extra"
import glob from "fast-glob";
import { join } from "node:path"
import chokidar from "chokidar"
import ora from "ora";
import { compile } from "@danielx/civet"

const cwd = process.cwd()
const vscodeConfigDir = join(cwd, ".vscode")
const vscodeConfigFile = join(vscodeConfigDir, "settings.json")

const collectFiles = async () => { 
    return await glob("**/*.civet", {ignore: ["node_modules/**/*", "dist/**/*"], cwd: cwd})
}

const step = async (desc: string, fn: any) => { 
    const spinner = ora(desc)
    spinner.start()
    await Promise.resolve(fn())
    return spinner.stop()
}

const compileFile = async (file: string) => {
    const a = 5 + 7
    const content = await fs.readFile(file, "utf8")
    const compiled = await compile(content, ({inlineMap: true}) as any)
    return `// Source: ${file}
// Generated by Civetman

${compiled}`
}

const buildFile = async (file: string, tsx: boolean) => {
    const outFile = file.replace(".civet", tsx ? ".tsx" : ".ts")
    const compiled = await compileFile(file)
    await fs.writeFile(outFile, compiled, "utf8")
    return outFile
}

const civetmanVscodeConfigBanner = "below is generated by civetman"
const vscodeConfigFileExludeKey = "files.exclude"
const addVscodeConfigFileExclude = async (files: string[]) => { 
    const spinner = ora(c.blue(`Adding exclude files to VSCode config`))
    spinner.start()

    await fs.ensureDir(vscodeConfigDir)
    await fs.ensureFile(vscodeConfigFile)
    const vscconfig = JSON.parse((await fs.readFile(vscodeConfigFile)).toString())
    if (!vscconfig[vscodeConfigFileExludeKey]) vscconfig[vscodeConfigFileExludeKey] = {}

    let found = false
    vscconfig[vscodeConfigFileExludeKey] = [
        ...Object.keys(vscconfig[vscodeConfigFileExludeKey]).reduce(((prev: string[], curr: string) => { 
            if (curr === civetmanVscodeConfigBanner) found = true
            return found ? prev : [...prev, curr]
        }
           ), []), 
        civetmanVscodeConfigBanner, 
        ...files,
    ].reduce((prev, file) => ({ ...prev, [file]: true }), {})

    await fs.writeFile(vscodeConfigFile, (JSON.stringify(vscconfig, null, "\t")), "utf8")

    spinner.stop()
    return spinner.succeed()
}

const gitignoreFile = join(cwd, ".gitignore")
const gitignoreStart = `# Generated by Civetman
# DO NOT ADD CONTENT BELOW THIS (They will be removed by Civetman)`
const addGitignore = async (files: string[]) => { 
    const spinner = ora(c.blue(`Adding files to .gitignore...`))
    spinner.start()

    await fs.ensureFile(vscodeConfigFile)
    const gitignore = await fs.readFile(gitignoreFile, "utf8")
    const start = gitignore.indexOf(gitignoreStart)
    const before = start === -1 ? gitignore : gitignore.slice(0, start)
    const content = `${before.trimEnd()}

${gitignoreStart}
${files.join("\n")}`
    await fs.writeFile(gitignoreFile, content, "utf8")

    spinner.stop()
    return spinner.succeed()
}
    
program
    .name("civetman") 
    .description("Use Civet in any projects!") 
    .version("0.0.1")
    .option("-x, --tsx, --jsx", "Generate `.tsx` files instead of `.ts` files")

type Options = { tsx: boolean }
let opts = null as unknown as Options
const defaultOpts = { tsx: false }

program
    .command("build")
    .description("Start building Civet files") 
    .action(async () => { 
        console.log(c.blue(`Civetman starts building...\n`))

        const spinner = ora(c.blue(`Building Civet files\n`))
        const files = await collectFiles()
        const outFiles = [] as string[]
        for (const file of files) {
            const outFile = await buildFile(file, opts.tsx)
            outFiles.push(outFile)
            spinner.succeed(`${c.cyan(file)} -> ${c.green(outFile)}`)
        }
        spinner.stop()
        spinner.succeed("All Civet files built!\n")
        
        await addVscodeConfigFileExclude(outFiles)
        await addGitignore(outFiles)

        console.log(c.green(`\nCivetman finished building!`))

        return
})

program
    .command("dev")
    .description("Start building Civet files in watch mode")
    .action(async () => { 
        console.log(c.blue(`Civetman starts building...\n`))
        const spinner = ora(c.blue(`Building Civet files\n`))

        const buildOneFile = async (file: string) => { 
            const outFile = await buildFile(file, opts.tsx)
            outFiles.push(outFile)
            return spinner.succeed(`${c.cyan(file)} -> ${c.green(outFile)}`)
        }

        const files = await collectFiles()
        const outFiles = [] as string[]
        for (const file of files) {
            buildOneFile(file)
        }
        
        await addVscodeConfigFileExclude(outFiles)
        await addGitignore(outFiles)

        const watcher = chokidar.watch(cwd, {ignored: ["node_modules/**/*", "dist/**/*"]})
        watcher.on("add", async (file) => { 
            if (file.endsWith(".civet")) { 
                buildOneFile(file)
                return files.push(file)
            }
            return
        })
        
        // watcher.on("change", async (file) => {
        //     outFile := await buildFile file, opts.tsx
        //     outFiles.push outFile
        //     spinner.succeed """
        //         #{c.cyan file} -> #{c.green outFile}
        //     """
        // })

        return
})

export default () => { 
    program.hook('preAction' , () => { opts = { ...defaultOpts, ...program.opts<Options>() }; })
    return program.parse(process.argv)
}
//# sourceMappingURL=data:application/json;base64,
